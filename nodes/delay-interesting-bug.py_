from __future__ import annotations
from enum import Enum
import numpy as np
from pydantic import ConfigDict
from config import SAMPLE_RATE
from nodes.node_utils.base_node import BaseNode, BaseNodeModel
from nodes.node_utils.node_definition_type import NodeDefinition
from nodes.wavable_value import WavableValue

class DelayMode(str, Enum):
    DIGITAL = "DIGITAL"
    TAPE = "TAPE"
    
    @classmethod
    def _missing_(cls, value):
        """Make enum case-insensitive"""
        if isinstance(value, str):
            value = value.upper()
            for member in cls:
                if member.value.upper() == value:
                    return member
        return None

class DelayModel(BaseNodeModel):
    model_config = ConfigDict(extra='forbid')
    time: WavableValue  # Delay time in seconds
    mode: DelayMode = DelayMode.DIGITAL  # DIGITAL or TAPE mode
    signal: BaseNodeModel = None

class DelayNode(BaseNode):
    def __init__(self, model: DelayModel):
        from nodes.node_utils.instantiate_node import instantiate_node
        super().__init__(model)
        self.model = model
        self.time_node = self.instantiate_child_node(model.time, "time")
        self.signal_node = self.instantiate_child_node(model.signal, "signal")
        
        # Circular buffer for storing delayed samples
        # We allocate enough space for the maximum delay time we might need
        # Using 10 seconds as a reasonable maximum
        max_delay_samples = int(10 * SAMPLE_RATE)
        self.buffer_size = max_delay_samples
        
        # Single buffer and write position (like a physical delay unit)
        self.buffer = np.zeros(self.buffer_size, dtype=np.float32)
        self.write_position = 0
        
        # For TAPE mode: track the fractional read position
        self.read_position = 0.0  # Can be fractional for tape speed changes
        self.previous_delay_time = None  # Track delay time changes for tape mode

    def _do_render(self, num_samples=None, context=None, **params):
        # If num_samples is None, get the full child signal
        if num_samples is None:
            num_samples = self.resolve_num_samples(num_samples)
            if num_samples is None:
                # Need to get full signal from child
                signal_wave = self.render_full_child_signal(self.signal_node, context, **self.get_params_for_children(params))
                if len(signal_wave) == 0:
                    return np.array([])
                
                num_samples = len(signal_wave)
                # Get delay times for the full signal
                delay_times = self.time_node.render(num_samples, context, **self.get_params_for_children(params))
                return self._apply_delay(signal_wave, delay_times, num_samples)
        
        # CRITICAL: Snapshot buffer state BEFORE rendering input signal
        # This ensures all recursion depths see the same initial buffer state
        buffer_snapshot = self.buffer.copy()
        write_position_snapshot = self.write_position
        
        # Now render the input signal (which may trigger recursive calls)
        signal_wave = self.signal_node.render(num_samples, context, **self.get_params_for_children(params))
        
        # Restore buffer state for our read/write operations
        self.buffer = buffer_snapshot
        self.write_position = write_position_snapshot
        
        # If signal is done, we're done (no tail for pure delay)
        if len(signal_wave) == 0:
            return np.array([], dtype=np.float32)
        
        # Get delay times
        delay_times = self.time_node.render(num_samples, context, **self.get_params_for_children(params))
        
        return self._apply_delay(signal_wave, delay_times, num_samples)
    
    def _apply_delay(self, signal_wave, delay_times, num_samples):
        """Apply delay to the signal wave using a circular buffer"""
        
        if self.model.mode == DelayMode.DIGITAL:
            return self._apply_digital_delay(signal_wave, delay_times, num_samples)
        else:  # TAPE mode
            return self._apply_tape_delay(signal_wave, delay_times, num_samples)
    
    def _apply_digital_delay(self, signal_wave, delay_times, num_samples):
        """Digital delay mode - delay time changes instantly without pitch shift"""
        output = np.zeros(num_samples, dtype=np.float32)
        
        # Handle both constant and time-varying delay times
        if len(delay_times) == 1:
            # Constant delay time - vectorized operations
            delay_samples = int(delay_times[0] * SAMPLE_RATE)
            delay_samples = np.clip(delay_samples, 0, self.buffer_size - 1)
            
            # Calculate all positions at once
            write_positions = (self.write_position + np.arange(num_samples)) % self.buffer_size
            read_positions = (write_positions - delay_samples) % self.buffer_size
            
            # CRITICAL: Read BEFORE write (like physical hardware)
            output = self.buffer[read_positions].copy()
            
            # Now write the input
            self.buffer[write_positions] = signal_wave
            
            # Update write position for next render
            self.write_position = (self.write_position + num_samples) % self.buffer_size
        else:
            # Time-varying delay - requires interpolation
            delay_samples_array = delay_times * SAMPLE_RATE
            delay_samples_array = np.clip(delay_samples_array, 0, self.buffer_size - 1)
            
            # Calculate write positions
            write_positions = (self.write_position + np.arange(num_samples)) % self.buffer_size
            
            # For fractional delays, use linear interpolation
            delay_samples_int = delay_samples_array.astype(int)
            delay_samples_frac = delay_samples_array - delay_samples_int
            
            # Calculate read positions for interpolation
            read_positions_1 = (write_positions - delay_samples_int) % self.buffer_size
            read_positions_2 = (write_positions - delay_samples_int - 1) % self.buffer_size
            
            # CRITICAL: Read BEFORE write
            sample_1 = self.buffer[read_positions_1]
            sample_2 = self.buffer[read_positions_2]
            output = sample_1 * (1 - delay_samples_frac) + sample_2 * delay_samples_frac
            
            # Now write the input
            self.buffer[write_positions] = signal_wave
            
            # Update write position for next render
            self.write_position = (self.write_position + num_samples) % self.buffer_size
        
        return output
    
    def _apply_tape_delay(self, signal_wave, delay_times, num_samples):
        """Tape delay mode - delay time changes cause pitch shifting like a tape speed change"""
        output = np.zeros(num_samples, dtype=np.float32)
        
        # Get the target delay time (use first/average if varying)
        target_delay_time = delay_times[0] if len(delay_times) == 1 else np.mean(delay_times)
        
        # Initialize read position if this is the first call
        if self.previous_delay_time is None:
            self.previous_delay_time = target_delay_time
            self.read_position = float(self.write_position - int(target_delay_time * SAMPLE_RATE))
        
        # Calculate the target read position based on current delay time
        target_delay_samples = target_delay_time * SAMPLE_RATE
        target_read_position = float(self.write_position - target_delay_samples)
        
        # Calculate read speed adjustment to smoothly transition to new delay time
        # This creates the tape speed up/slow down effect
        position_difference = target_read_position - self.read_position
        read_speed = 1.0 + (position_difference / num_samples)
        
        # Generate read positions with variable speed (can be fractional)
        read_positions = self.read_position + np.arange(num_samples) * read_speed
        
        # Wrap positions and split into integer and fractional parts for interpolation
        read_positions_wrapped = read_positions % self.buffer_size
        read_positions_int = read_positions_wrapped.astype(int)
        read_positions_frac = read_positions_wrapped - read_positions_int
        
        # Linear interpolation for smooth playback
        next_positions = (read_positions_int + 1) % self.buffer_size
        sample_1 = self.buffer[read_positions_int]
        sample_2 = self.buffer[next_positions]
        output = sample_1 * (1 - read_positions_frac) + sample_2 * read_positions_frac
        
        # Write input to buffer
        write_positions = (self.write_position + np.arange(num_samples)) % self.buffer_size
        self.buffer[write_positions] = signal_wave
        
        # Update positions for next render
        self.write_position = (self.write_position + num_samples) % self.buffer_size
        self.read_position = (read_positions[-1] + read_speed) % self.buffer_size
        self.previous_delay_time = target_delay_time
        
        return output

DELAY_DEFINITION = NodeDefinition("delay", DelayNode, DelayModel)
